on:
  push:
    branches: [ main ]
  pull_request:

name: CI

jobs:

  test:
    name: Cargo test (${{ matrix.os }})
    runs-on: ${{ matrix. os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --release --verbose --examples
    - name: Test
      run: cargo test --release
  
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check  # Also fmt subdirectories

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all -- -D warnings
  
  R-CMD-check:

    name: R CMD check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
         os: ['ubuntu-latest', 'macos-latest'] # TODO: Add windows here

    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: 'release'
          use-public-rspm: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 'stable'
      - name: Install dependencies
        run: |
          install.packages(c("R6", "testthat", "rcmdcheck"), repos="http://cran.us.r-project.org")
        shell: Rscript {0}
      - name: Run R CMD check
        run: |
          R CMD check --as-cran --no-vignettes --no-manual ./changeforest-r
        env:
          _R_CHECK_CRAN_INCOMING_: false
        if: matrix.os != 'windows-latest'
      - name: Check for warnings
        run: |
          CHECK_LOG_FILE=changeforest-r.Rcheck/00check.log
          CHECK_INSTALL_FILE=changeforest-r.Rcheck/00install.out
          if ! [[ -f "$CHECK_LOG_FILE" ]]; then
            echo "Log-file not found."
            exit 1
          fi
          if cat $CHECK_LOG_FILE | grep -q "ERROR"; then
            cat $CHECK_INSTALL_FILE
            cat $CHECK_LOG_FILE
            exit 1
          fi
          if cat $CHECK_LOG_FILE | grep -q "WARNING"; then
            echo "Found warnings, treated as errors."
            cat $CHECK_LOG_FILE
            exit 1
          fi
        # e: pipefail
        # x: print commands
        # u: unset variables are errors
        # l: as login script
        shell: bash -lxu {0}
        if: matrix.os != 'windows-latest'

  # Mostly taken from https://github.com/etesync/etebase-py/blob/ee7bf21e9f57f0ce37f08d\
  # 1f5cefd8ef0d3bb2f7/.github/workflows/manual.yml#L33
  python-build-wheels:
    name: Python build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
      
    env:
      # Install rust in container before building wheels.
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y openssl-devel"
      # See https://github.com/pypa/pip/issues/7555 for PIP_USE_FEATURE=in-tree-build.
      # This enables relative paths, e.g. in the Cargo.toml.
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin" PIP_USE_FEATURE="in-tree-build"'
      # Python 3.6 build are slooow
      # win32 raise error: your Rust target architecture (64-bit) does not match your python interpreter (32-bit)
      # pypi builds on macos require compilation of numpy (why?) and are thus super slow
      # fail due to https://github.com/numpy/numpy/issues/15947.   
      # Tests fail for 32bit linux. Possibly something to do with RNG?
      CIBW_SKIP: "cp36-* *-win32 pp*-macosx* *linux_i686*"
      CIBW_TEST_REQUIRES: "pytest numpy"
      CIBW_TEST_COMMAND: "pytest {project}/changeforest-py/tests"

    steps:
      - uses: actions/checkout@v2

      # - name: Set env variables for windows
      #   if: runner.os == 'Windows'
      #   run: |
      #       echo 'PATH=/c/Python38:/c/Python38/Scripts:/c/Strawberry/perl/site/bin:/c/Strawberry/perl/bin:/c/Strawberry/c/bin:$PATH' >> $GITHUB_ENV
      #       echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> $GITHUB_ENV
      #       echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> $GITHUB_ENV
      #       echo 'CIBW_BEFORE_BUILD=python -m pip install --upgrade pip' >> $GITHUB_ENV

      - if: runner.os == 'Linux'
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64

      - if: runner.os != 'Linux'
        name: Setup env when not using docker
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'
 
      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel

      - name: Build wheels
        run: |
          python -m cibuildwheel changeforest-py --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  python-build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install build dependencies
        run: python -m pip install numpy maturin
      - name: Build sdist
        run: maturin sdist -m changeforest-py/Cargo.toml

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  python-tests:
    name: Python test Wheels (${{ matrix.os }})
    needs: [python-build-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
  
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install wheel
        run: |
          pip install numpy pytest
          pip install --force-reinstall --no-index --find-links . changeforest
      - name: Run tests
        run: pytest changeforest-py/tests
